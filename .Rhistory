baseline_data <- create_synchrony_dataset(data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"),
heatmap_condition = "Baseline")
library(MEAanalysis)
baseline_data <- create_synchrony_dataset(data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"),
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(data_path = system.file("extdata", "comparison_agonist_challenge_neuralMetrics.csv", package = "MEAanalysis"),
heatmap_condition = "Agonist Challenge")
df_list <- list(baseline_data, agonist_challenge_data)
heatmap_data <- df_list %>%
reduce(full_join, by = 'Well')
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
}
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 45))
}
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 45))
}
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
View(heatmap_data)
library(devtools)
