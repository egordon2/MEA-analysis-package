output_table <- electrode_burst_duration(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_spikes_per_burst(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_mean_burst_ISI(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_number_of_bursts(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_2")
p <- single_electrode_barchart(data = output_table, electrode_parameter = "burst_duration", electrode_filter = "A1_", statistic = se)
print(p)
p <- single_electrode_barchart(data = output_table, electrode_parameter = "spikes_per_burst", electrode_filter = "A1_", statistic = se)
print(p)
p <- single_electrode_barchart(data = output_table, electrode_parameter = "mean_burst_ISI", electrode_filter = "A1_", statistic = se)
print(p)
p <- single_electrode_barchart(data = output_table, electrode_parameter = "number_of_bursts", electrode_filter = "A1_")
print(p)
test_data_1 <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"),
recording_identifier = "test_data_1")
test_data_2 <- create_electrode_dataset(data_path = system.file("extdata", "comparison_agonist_challenge_electrode_burst_list.csv", package = "MEAanalysis"),
recording_identifier = "test_data_2")
output_table <- rbind(test_data_1, test_data_2)
output_table <- well_burst_duration(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_burst_duration(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- well_spikes_per_burst(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_spikes_per_burst(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- well_mean_burst_ISI(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_mean_burst_ISI(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- well_number_of_bursts(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_number_of_bursts(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_2")
p <- well_barchart(data = output_table, well_parameter = "burst_duration", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
p <- well_barchart(data = output_table, well_parameter = "spikes_per_burst", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
p <- well_barchart(data = output_table, well_parameter = "mean_burst_ISI", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
p <- well_barchart(data = output_table, well_parameter = "number_of_bursts", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
baseline_data <- create_synchrony_dataset(data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"),
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(data_path = system.file("extdata", "comparison_agonist_challenge_neuralMetrics.csv", package = "MEAanalysis"),
heatmap_condition = "Agonist Challenge")
df_list <- list(baseline_data, agonist_challenge_data)
heatmap_data <- df_list %>%
reduce(full_join, by = 'Well')
p <- MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
print(p)
library(roxygen2)
library(devtools)
roxygenise()
library(usethis)
use_gpl_license(version = 2, include_future = TRUE)
library(MEAanalysis)
create_synchrony_dataset <- function(data_path, heatmap_condition) {
# Declare variables
input_data <- NULL
data_1 <- NULL
data_2 <- NULL
# read in electrode_burst_list file produced by axis navigator software (update data_path accordingly)
if (str_detect(data_path, ".csv")) {
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE)
} else if (str_detect(data_path, ".xlsx")) {
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
} else if (str_detect(data_path, ".xls")) {
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
} else {
stop("Unsupported file format. Please provide a CSV or Excel file.")
}
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(X1, "Well Averages|Synchrony Index"), ]
# transpose data table
data_2 <- transpose(data_1)
setDT(data_2)
data_2 <- row_to_names(data_2, row_number = 1)
colnames(data_2)[1] <- c("Well")
data_2 <- data_2[str_detect(Well, "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6"), ]
data_2[, 2] <- sapply(data_2[, 2], as.numeric)
# include heatmap_condition in synchrony index column name
names(data_2)[names(data_2) == "Synchrony Index"] <- paste0("synchrony_index: ", heatmap_condition)
return(data_2)
}
burst_recording_1 <- create_electrode_dataset(
data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"),
recording_identifier = "burst_recording_1")
burst_recording_1 <- create_electrode_dataset(
data_path = system.file("extdata", "input_electrode_burst.xlsx", package = "MEAanalysis"),
recording_identifier = "burst_recording_1")
baseline_data <- create_synchrony_dataset(
data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"),
heatmap_condition = "Baseline")
baseline_data <- create_synchrony_dataset(
data_path = system.file("extdata", "input_neuralMetric.xlsx", package = "MEAanalysis"),
heatmap_condition = "Baseline")
create_electrode_dataset <- function(data_path, recording_identifier) {
# Declare variables
data_1 <- NULL
data_2 <- NULL
data_3 <- NULL
# read in electrode_burst_list file produced by axis navigator software (update data_path accordingly)
if (str_detect(data_path, ".csv")) {
input_data <- read_csv(file = data_path, col_select = 3:6, show_col_types = FALSE)
} else if (str_detect(data_path, ".xlsx")) {
input_data <- read_xlsx(path = data_path) %>%
select(3:6)
} else if (str_detect(data_path, ".xls")) {
input_data <- read_xls(path = data_path) %>%
select(3:6)
} else {
stop("Unsupported file format. Please provide a CSV or Excel file.")
}
# convert data frame to data table format for efficiency
setDT(input_data)
# filter to only include data relevant to electrode recordings
data_1 <- input_data[str_detect(Electrode, "A1_|A2_|A3_|A4_|A5_|A6_|B1_|B2_|B3_|B4_|B5_|B6_|C1_|C2_|C3_|C4_|C5_|C6_|D1_|D2_|D3_|D4_|D5_|D6_"), ]
# reassign column name and class
setcolorder(data_1, c("Electrode", "Time (s)", "Size (spikes)", "Duration (s)"))
colnames(data_1)[2:4] <- c("Time_s", "Size_spikes", "Duration_s")
# Create a function to convert non-numeric values to NA
convert_to_numeric <- function(x) {
as.numeric(as.character(x), na.rm = TRUE)
}
# Apply the conversion function to selected columns
data_1[, (2:4) := lapply(.SD, convert_to_numeric), .SDcols = 2:4]
# sort and group data by electrode
# add extra columns to identify well and recording
data_1 <- data_1[order(data_1$Electrode)]
data_2 <- data_1[, Recording_identifier := recording_identifier , by = Electrode]
data_3 <- data_2[, well := str_sub(Electrode, start = 1L, end = 2L)]
return(data_3)
}
burst_recording_1 <- create_electrode_dataset(
data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"),
recording_identifier = "burst_recording_1")
burst_recording_1 <- create_electrode_dataset(
data_path = system.file("extdata", "input_electrode_burst.xlsx", package = "MEAanalysis"),
recording_identifier = "burst_recording_1")
library(devtools)
devtools::build("MEAanalysis")
devtools::build("MEAanalysis")
burst_recording_1 <- create_electrode_dataset(
data_path = system.file("extdata", "input_electrode_burst.xlsx", package = "MEAanalysis"),
recording_identifier = "burst_recording_1")
getwd()
burst_recording_1 <- create_electrode_dataset(
data_path = "/.input_electrode_burst.xlsx",
recording_identifier = "burst_recording_1")
burst_recording_1 <- create_electrode_dataset(
data_path = "./input_electrode_burst.xlsx",
recording_identifier = "burst_recording_1")
baseline_data <- create_synchrony_dataset(
data_path = "input_neuralMetric.xlsx",
heatmap_condition = "Baseline")
baseline_data <- create_synchrony_dataset(
data_path = "input_neuralMetric.xlsx",
heatmap_condition = "Baseline")
data_path = "input_neuralMetric.xlsx"
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
View(input_data)
data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis")
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE)
View(input_data)
data_path = "input_neuralMetric.xlsx"
?read_excel
input_data <- read_excel(path = data_path, skip = 29)
input_data <- read_excel(path = data_path, skip = 29)
View(burst_recording_1)
View(input_data)
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
View(input_data)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(.[[1]], "Well Averages|Synchrony Index"), ]
# extract well and synchrony index data
data_1 <- input_data[str_detect([[1]], "Well Averages|Synchrony Index"), ]
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(...1, "Well Averages|Synchrony Index"), ]
create_synchrony_dataset <- function(data_path, heatmap_condition) {
# Declare variables
input_data <- NULL
data_1 <- NULL
data_2 <- NULL
# read in electrode_burst_list file produced by axis navigator software (update data_path accordingly)
if (str_detect(data_path, ".csv")) {
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(X1, "Well Averages|Synchrony Index"), ]
} else if (str_detect(data_path, ".xlsx")) {
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(...1, "Well Averages|Synchrony Index"), ]
} else if (str_detect(data_path, ".xls")) {
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(...1, "Well Averages|Synchrony Index"), ]
} else {
stop("Unsupported file format. Please provide a CSV or Excel file.")
}
# transpose data table
data_2 <- transpose(data_1)
setDT(data_2)
data_2 <- row_to_names(data_2, row_number = 1)
colnames(data_2)[1] <- c("Well")
data_2 <- data_2[str_detect(Well, "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6"), ]
data_2[, 2] <- sapply(data_2[, 2], as.numeric)
# include heatmap_condition in synchrony index column name
names(data_2)[names(data_2) == "Synchrony Index"] <- paste0("synchrony_index: ", heatmap_condition)
return(data_2)
}
baseline_data <- create_synchrony_dataset(
data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"),
heatmap_condition = "Baseline")
baseline_data <- create_synchrony_dataset(
data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"),
heatmap_condition = "Baseline")
View(input_data)
baseline_data <- create_synchrony_dataset(
data_path = system.file("extdata", "input_neuralMetric.xlsx", package = "MEAanalysis"),
heatmap_condition = "Baseline")
create_synchrony_dataset <- function(data_path, heatmap_condition) {
# Declare variables
input_data <- NULL
data_1 <- NULL
data_2 <- NULL
# read in electrode_burst_list file produced by axis navigator software (update data_path accordingly)
if (str_detect(data_path, ".csv")) {
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(X1, "Well Averages|Synchrony Index"), ]
} else if (str_detect(data_path, ".xlsx")) {
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(...1, "Well Averages|Synchrony Index"), ]
} else if (str_detect(data_path, ".xls")) {
input_data <- read_excel(path = data_path, skip = 29, col_names = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(...1, "Well Averages|Synchrony Index"), ]
} else {
stop("Unsupported file format. Please provide a CSV or Excel file.")
}
# transpose data table
data_2 <- transpose(data_1)
setDT(data_2)
data_2 <- row_to_names(data_2, row_number = 1)
colnames(data_2)[1] <- c("Well")
data_2 <- data_2[str_detect(Well, "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6"), ]
data_2[, 2] <- sapply(data_2[, 2], as.numeric)
# include heatmap_condition in synchrony index column name
names(data_2)[names(data_2) == "Synchrony Index"] <- paste0("synchrony_index: ", heatmap_condition)
return(data_2)
}
baseline_data <- create_synchrony_dataset(
data_path = system.file("extdata", "input_neuralMetric.xlsx", package = "MEAanalysis"),
heatmap_condition = "Baseline")
baseline_data <- create_synchrony_dataset(
data_path = "input_neuralMetric.xlsx",
heatmap_condition = "Baseline")
View(baseline_data)
devtools::check("MEAanalysis")
devtools::check("MEAanalysis")
baseline_data <- create_synchrony_dataset(
data_path = "input_neuralMetric.xlsx",
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(
data_path = system.file("extdata", "comparison_agonist_challenge_neuralMetrics.csv", package = "MEAanalysis"),
heatmap_condition = "Agonist Challenge")
# view first 10 lines of dataset
head(agonist_challenge_data, 10)
# view first 10 lines of dataset
head(agonist_challenge_data, 10)
# 2. Merge and reformat neural metric datasets.
The neuralMetric datasets for each experimental condition should then be merged. This can be done using the reduce() function, as demonstrated below. The user should update the df_list to include the data table object names assigned when loading the neuralMetric data into the R environment. As shown in the below example, the column titles will ensure the heatmap condition can still be identified.
```{r}
df_list <- list(baseline_data, agonist_challenge_data)
heatmap_data <- df_list %>%
reduce(full_join, by = 'Well')
p <- MEA_heatmap(data = heatmap_data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
print(p)
burst_recording_1 <- create_electrode_dataset(
data_path = input_electrode_burst,
recording_identifier = "burst_recording_1")
burst_recording_1 <- create_electrode_dataset(
data_path = input_electrode_burst.xlsx,
recording_identifier = "burst_recording_1")
burst_recording_1 <- create_electrode_dataset(
data_path = "input_electrode_burst.xlsx",
recording_identifier = "burst_recording_1")
burst_recording_2 <- create_electrode_dataset(
data_path = system.file("extdata", "comparison_agonist_challenge_electrode_burst_list.csv", package = "MEAanalysis"),
recording_identifier = "burst_recording_2")
output_table <- rbind(burst_recording_1, burst_recording_2)
# assign the 'output_table' data table object created above to a different object name 'analysis_dataset'
# this means that when columns are added to the 'analysis_dataset' the data table can be refreshed by rerunning this line of code
analysis_dataset <- output_table
# add burst duration calculated columns for defined time intervals to the 'analysis_dataset'
analysis_dataset <- electrode_burst_duration(data = analysis_dataset, 0, 60, recording_identifier = "burst_recording_1")
analysis_dataset <- electrode_burst_duration(data = analysis_dataset, 0, 60, recording_identifier = "burst_recording_2")
analysis_dataset <- electrode_burst_duration(data = analysis_dataset, 60, 120, recording_identifier = "burst_recording_1")
analysis_dataset <- electrode_burst_duration(data = analysis_dataset, 60, 120, recording_identifier = "burst_recording_2")
p <- single_electrode_barchart(data = analysis_dataset,
electrode_parameter = "burst_duration",
electrode_filter = "A1_1|A1_2",
statistic = se)
print(p)
devtools::check("MEAanalysis")
library(devtools)
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
library(devtools)
devtools::document("MEAanalysis")
devtools::build("MEAanalysis")
devtools::build_vignettes("MEAanalysis")
devtools::build_vignettes("MEAanalysis")
library(MEAanalysis)
library(MEAanalysis)
library(ggplot2)
library(dplyr)
devtools::document()
devtools::document("MEAanalysis")
devtools::document("MEAanalysis")
devtools::build_vignettes("MEAanalysis")
devtools::document("MEAanalysis")
devtools::build_vignettes("MEAanalysis")
devtools::document("MEAanalysis")
devtools::build_vignettes("MEAanalysis")
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
devtools::check("MEAanalysis")
readLines("tests/testthat.R", warn = FALSE)
readLines("MEAanalysis/tests/testthat.R", warn = FALSE)
files <- list.files("MEAanalysis/tests/testthat", pattern = "\\.R$", full.names = TRUE)
for (f in files) {
txt <- readChar(f, file.info(f)$size)
if (grepl("\0", txt, fixed = TRUE)) {
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
test_that("create_electrode_dataset output is a datatable", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
expect_equal(is.data.table(dataset), TRUE)
})
library(testthat)
test_that("create_electrode_dataset output is a datatable", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
expect_equal(is.data.table(dataset), TRUE)
})
test_that("create_electrode_dataset output is a datatable", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("create_electrode_dataset column classes are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
# Define expected column classes
expected_columns <- data.table(
Electrode = character(),
Time_s = numeric(),
Size_spikes = numeric(),
Duration_s = numeric(),
Recording_identifier= character(),
well = character())
expected_classes <- sapply(expected_columns, class)
# Check that the column classes match the expected classes
expect_equal(sapply(dataset, class), expected_classes,
info = "Column classes should match the expected classes")
})
test_that("create_electrode_dataset column classes are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
# Define expected column classes
expected_columns <- data.table::data.table(
Electrode = character(),
Time_s = numeric(),
Size_spikes = numeric(),
Duration_s = numeric(),
Recording_identifier= character(),
well = character())
expected_classes <- sapply(expected_columns, class)
# Check that the column classes match the expected classes
expect_equal(sapply(dataset, class), expected_classes,
info = "Column classes should match the expected classes")
})
test_that("create_electrode_dataset output does not contain missing values", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
expect_equal(anyNA(dataset), FALSE)
})
test_that("well_spikes_per_burst output is a datatable", {
# Load the dataset
dataset <- well_spikes_per_burst(data = input_MEA_data,
time_lower_bound = 0,
time_upper_bound = 30,
recording_identifier = "burst_recording_1")
expect_equal(is.data.table(dataset), TRUE)
})
test_that("well_spikes_per_burst output is a datatable", {
# Load the dataset
dataset <- well_spikes_per_burst(data = input_MEA_data,
time_lower_bound = 0,
time_upper_bound = 30,
recording_identifier = "burst_recording_1")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("well_number_of_bursts output is a datatable", {
# Load the dataset
dataset <- well_number_of_bursts(data = input_MEA_data,
time_lower_bound = 0,
time_upper_bound = 30,
recording_identifier = "burst_recording_1")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("well_mean_burst_ISI output is a datatable", {
# Load the dataset
dataset <- well_mean_burst_ISI(data = input_MEA_data,
time_lower_bound = 0,
time_upper_bound = 30,
recording_identifier = "burst_recording_1")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("well_burst_duration output is a datatable", {
# Load the dataset
dataset <- well_burst_duration(data = input_MEA_data,
time_lower_bound = 0,
time_upper_bound = 30,
recording_identifier = "burst_recording_1")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("electrode_spikes_per_burst output is a datatable", {
# Load the dataset
dataset <- electrode_spikes_per_burst(data = input_MEA_data,
time_lower_bound = 0,
time_upper_bound = 30,
recording_identifier = "burst_recording_1")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("electrode_mean_burst_ISI output is a datatable", {
# Load the dataset
dataset <- electrode_mean_burst_ISI(data = input_MEA_data,
time_lower_bound = 0,
time_upper_bound = 30,
recording_identifier = "burst_recording_1")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
dataset <- create_synchrony_dataset(data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"), heatmap_condition = "Baseline")
expect_equal(data.table::is.data.table(dataset), TRUE)
})
test_that("create_synchrony dataset column classes are correct",{
# Load dataset
dataset <- create_synchrony_dataset(data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"), heatmap_condition = "Baseline")
# Define expected column names and classes
expected_columns <- data.table::data.table(
Well = character(),
"synchrony_index: Baseline" = numeric()
)
expected_classes <- sapply(expected_columns, class)
expect_equal(sapply(dataset, class), expected_classes, info = "Column classes should match the expected classes")
})
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
devtools::build_vignettes("MEAanalysis")
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
library(devtools)
devtools::built("MEAanalysis")
devtools::build("MEAanalysis")
devtools::check("MEAanalysis")
