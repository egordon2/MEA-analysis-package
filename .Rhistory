data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
}
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 45))
}
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 45))
}
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
View(heatmap_data)
library(devtools)
test_data_1 <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"),
recording_identifier = "test_data_1")
library(MEAanalysis)
single_electrode_barchart <- function(data = output_table,
electrode_parameter,
electrode_filter =
"A1_|A2_|A3_|A4_|A5_|A6_|B1_|B2_|B3_|B4_|B5_|B6_|C1_
|C2_|C3_|C4_|C5_|C6_|D1_|D2_|D3_|D4_|D5_|D6_",
statistic = se) {
# Declare variables
analysis_dataset <- NULL
analysis_dataset_2 <- NULL
analysis_dataset_3 <- NULL
analysis_dataset_4 <- NULL
analysis_dataset_5 <- NULL
raw_values <- NULL
calculated_statistics <- NULL
#filter data for plotting
analysis_dataset <- data %>%
select(-c(Time_s, Duration_s, Size_spikes, Recording_identifier)) %>%
distinct() %>%
filter(., str_detect(Electrode, electrode_filter))
#assign y axis title dependent on chosen electrode parameter
#(include "number_of_bursts"/ "burst_duration"/ "spikes_per_burst"/ "mean_burst_ISI")
if (electrode_parameter == "number_of_bursts") {
y_axis_title <- "Number of Bursts"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_number_of_bursts"))
} else if (electrode_parameter == "burst_duration") {
y_axis_title <- "Burst Duration - Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_duration_raw")|contains("electrode_duration_mean")|contains("electrode_duration_sd")|contains("electrode_duration_se"))
colnames(analysis_dataset_2) = gsub("electrode_duration_", "", colnames(analysis_dataset_2))
} else if (electrode_parameter == "spikes_per_burst") {
y_axis_title <- "Number of Spikes per Burst - Average"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_spikes_raw")|contains("electrode_spikes_mean")|contains("electrode_spikes_sd")|contains("electrode_spikes_se"))
colnames(analysis_dataset_2) = gsub("electrode_spikes_", "", colnames(analysis_dataset_2))
} else if (electrode_parameter == "mean_burst_ISI") {
y_axis_title <- "Mean ISI within Burst - Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_raw_mean_burst_ISI")|contains("electrode_avg_mean_burst_ISI")|contains("electrode_sd_mean_burst_ISI")|contains("electrode_se_mean_burst_ISI"))
colnames(analysis_dataset_2) = gsub("_mean_burst_ISI", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("electrode_", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("avg", "mean", colnames(analysis_dataset_2))
}  else {
}
#reformat data for plotting
analysis_dataset_3 <- melt(analysis_dataset_2, id = "Electrode")
analysis_dataset_3$recording_time = gsub(pattern = ".*:", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3$parameter = gsub(pattern = "\\:.*", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3 <- analysis_dataset_3 %>%
select(-c(variable))
# remove duplicate rows if not raw value
# create analysis dataset for use in bar plot dependent on chosen parameter
if (electrode_parameter == "number_of_bursts") {
#remove duplicate rows where value is NA (grouped by electrode, recording_time, and parameter)
analysis_dataset_4 <- analysis_dataset_3 %>%
group_by(Electrode, recording_time, parameter) %>%
filter(value == max(value)) %>%
distinct() %>%
ungroup()
#pivot data wider so can plot individual columns
analysis_dataset_5 <- analysis_dataset_4 %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value)
}  else {
# create data frame of raw values
raw_values <- analysis_dataset_3 %>%
filter(., parameter == "raw")
# create data frame of distinct calculated statistics
calculated_statistics <- analysis_dataset_3 %>%
filter(., parameter != "raw") %>%
distinct() %>%
group_by(Electrode, recording_time, parameter) %>%
slice(which.max(!is.na(value)))
# pivot raw data wider so can plot
analysis_dataset_4 <- raw_values %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value,
values_fn = list) %>%
unnest(cols = c(raw))
# pivot data wider so can plot individual columns
analysis_dataset_5 <- calculated_statistics %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value,
values_fn = list)
# reassign column name and class
analysis_dataset_5[, 3:5] <- sapply(analysis_dataset_5[, 3:5], as.numeric)
}
# plot barchart
if (electrode_parameter == "number_of_bursts") {
p <- analysis_dataset_5 %>%
ggplot(aes(x = Electrode, y = electrode_number_of_bursts, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
labs(fill = "Time Interval", y = y_axis_title)
} else {
p <- analysis_dataset_5 %>%
ggplot(aes(x = Electrode, y = mean, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin = mean - {{statistic}}, ymax = mean + {{statistic}}), linewidth = 0.4, colour = "orange", alpha = 0.9, size = 1.5, position=position_dodge()) +
geom_point(data = analysis_dataset_4, aes(x = Electrode, y = raw, fill = recording_time), position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.9)) +
labs(fill = "Time Interval", y = y_axis_title)
}
return(p)
}
test_data_1 <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"),
recording_identifier = "test_data_1")
test_data_2 <- create_electrode_dataset(data_path = system.file("extdata", "comparison_agonist_challenge_electrode_burst_list.csv", package = "MEAanalysis"),
recording_identifier = "test_data_2")
output_table <- rbind(test_data_1, test_data_2)
output_table <- electrode_burst_duration(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_spikes_per_burst(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_mean_burst_ISI(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_number_of_bursts(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_2")
single_electrode_barchart(data = output_table, electrode_parameter = "burst_duration", electrode_filter = "A1_", statistic = se)
p <- single_electrode_barchart(data = output_table, electrode_parameter = "burst_duration", electrode_filter = "A1_", statistic = se)
print(p)
p <- p + theme_bw()
print(p)
library(MEAanalysis)
single_electrode_barchart <- function(data = output_table,
electrode_parameter,
electrode_filter =
"A1_|A2_|A3_|A4_|A5_|A6_|B1_|B2_|B3_|B4_|B5_|B6_|C1_
|C2_|C3_|C4_|C5_|C6_|D1_|D2_|D3_|D4_|D5_|D6_",
statistic = se) {
# Declare variables
analysis_dataset <- NULL
analysis_dataset_2 <- NULL
analysis_dataset_3 <- NULL
analysis_dataset_4 <- NULL
analysis_dataset_5 <- NULL
raw_values <- NULL
calculated_statistics <- NULL
#filter data for plotting
analysis_dataset <- data %>%
select(-c(Time_s, Duration_s, Size_spikes, Recording_identifier)) %>%
distinct() %>%
filter(., str_detect(Electrode, electrode_filter))
#assign y axis title dependent on chosen electrode parameter
#(include "number_of_bursts"/ "burst_duration"/ "spikes_per_burst"/ "mean_burst_ISI")
if (electrode_parameter == "number_of_bursts") {
y_axis_title <- "Number of Bursts"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_number_of_bursts"))
} else if (electrode_parameter == "burst_duration") {
y_axis_title <- "Burst Duration - Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_duration_raw")|contains("electrode_duration_mean")|contains("electrode_duration_sd")|contains("electrode_duration_se"))
colnames(analysis_dataset_2) = gsub("electrode_duration_", "", colnames(analysis_dataset_2))
} else if (electrode_parameter == "spikes_per_burst") {
y_axis_title <- "Number of Spikes per Burst - Average"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_spikes_raw")|contains("electrode_spikes_mean")|contains("electrode_spikes_sd")|contains("electrode_spikes_se"))
colnames(analysis_dataset_2) = gsub("electrode_spikes_", "", colnames(analysis_dataset_2))
} else if (electrode_parameter == "mean_burst_ISI") {
y_axis_title <- "Mean ISI within Burst - Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_raw_mean_burst_ISI")|contains("electrode_avg_mean_burst_ISI")|contains("electrode_sd_mean_burst_ISI")|contains("electrode_se_mean_burst_ISI"))
colnames(analysis_dataset_2) = gsub("_mean_burst_ISI", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("electrode_", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("avg", "mean", colnames(analysis_dataset_2))
}  else {
}
#reformat data for plotting
analysis_dataset_3 <- melt(analysis_dataset_2, id = "Electrode")
analysis_dataset_3$recording_time = gsub(pattern = ".*:", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3$parameter = gsub(pattern = "\\:.*", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3 <- analysis_dataset_3 %>%
select(-c(variable))
# remove duplicate rows if not raw value
# create analysis dataset for use in bar plot dependent on chosen parameter
if (electrode_parameter == "number_of_bursts") {
#remove duplicate rows where value is NA (grouped by electrode, recording_time, and parameter)
analysis_dataset_4 <- analysis_dataset_3 %>%
group_by(Electrode, recording_time, parameter) %>%
filter(value == max(value)) %>%
distinct() %>%
ungroup()
#pivot data wider so can plot individual columns
analysis_dataset_5 <- analysis_dataset_4 %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value)
}  else {
# create data frame of raw values
raw_values <- analysis_dataset_3 %>%
filter(., parameter == "raw")
# create data frame of distinct calculated statistics
calculated_statistics <- analysis_dataset_3 %>%
filter(., parameter != "raw") %>%
distinct() %>%
group_by(Electrode, recording_time, parameter) %>%
slice(which.max(!is.na(value)))
# pivot raw data wider so can plot
analysis_dataset_4 <- raw_values %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value,
values_fn = list) %>%
unnest(cols = c(raw))
# pivot data wider so can plot individual columns
analysis_dataset_5 <- calculated_statistics %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value,
values_fn = list)
# reassign column name and class
analysis_dataset_5[, 3:5] <- sapply(analysis_dataset_5[, 3:5], as.numeric)
}
# plot barchart
if (electrode_parameter == "number_of_bursts") {
p <- analysis_dataset_5 %>%
ggplot(aes(x = Electrode, y = electrode_number_of_bursts, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
labs(fill = "Time Interval", y = y_axis_title)
} else {
p <- analysis_dataset_5 %>%
ggplot(aes(x = Electrode, y = mean, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin = mean - {{statistic}}, ymax = mean + {{statistic}}), linewidth = 0.4, colour = "orange", alpha = 0.9, size = 1.5, position=position_dodge()) +
geom_point(data = analysis_dataset_4, aes(x = Electrode, y = raw, fill = recording_time), position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.9)) +
labs(fill = "Time Interval", y = y_axis_title)
}
return(p)
}
well_barchart <- function(data = output_table, well_parameter,
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6",
statistic = se) {
# Declare variables
analysis_dataset <- NULL
analysis_dataset_2 <- NULL
analysis_dataset_3 <- NULL
analysis_dataset_4 <- NULL
analysis_dataset_5 <- NULL
raw_values <- NULL
calculated_statistics <- NULL
#filter data for plotting
analysis_dataset <- data %>%
select(-c(Time_s, Duration_s, Size_spikes, Recording_identifier)) %>%
distinct() %>%
filter(., str_detect(well, well_filter))
#assign y axis title dependent on chosen well parameter
#(include "number_of_bursts"/ "burst_duration"/ "spikes_per_burst"/ "mean_burst_ISI")
if (well_parameter == "number_of_bursts") {
y_axis_title <- "Average Number of Bursts in Well per Electrode"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_burst_count_raw")|contains("well_burst_count_mean")|contains("well_burst_count_sd")|contains("well_burst_count_se"))
colnames(analysis_dataset_2) = gsub("well_burst_count_", "", colnames(analysis_dataset_2))
} else if (well_parameter == "burst_duration") {
y_axis_title <- "Burst Duration - Well Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_duration_raw")|contains("well_duration_mean")|contains("well_duration_sd")|contains("well_duration_se"))
colnames(analysis_dataset_2) = gsub("well_duration_", "", colnames(analysis_dataset_2))
} else if (well_parameter == "spikes_per_burst") {
y_axis_title <- "Number of Spikes per Burst - Well Average"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_spikes_raw")|contains("well_spikes_mean")|contains("well_spikes_sd")|contains("well_spikes_se"))
colnames(analysis_dataset_2) = gsub("well_spikes_", "", colnames(analysis_dataset_2))
} else if (well_parameter == "mean_burst_ISI") {
y_axis_title <- "Mean ISI within Burst - Well Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_raw_mean_burst_ISI")|contains("well_avg_mean_burst_ISI")|contains("well_sd_mean_burst_ISI")|contains("well_se_mean_burst_ISI"))
colnames(analysis_dataset_2) = gsub("_mean_burst_ISI", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("well_", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("avg", "mean", colnames(analysis_dataset_2))
}  else {
}
#reformat data for plotting
analysis_dataset_3 <- melt(analysis_dataset_2, id = "well")
analysis_dataset_3$recording_time = gsub(pattern = ".*:", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3$parameter = gsub(pattern = "\\:.*", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3 <- analysis_dataset_3 %>%
select(-c(variable))
# create data frame of raw values
raw_values <- analysis_dataset_3 %>%
filter(., parameter == "raw")
# create data frame of distinct calculated statistics
calculated_statistics <- analysis_dataset_3 %>%
filter(., parameter != "raw") %>%
distinct() %>%
group_by(well, recording_time, parameter) %>%
slice(which.max(!is.na(value)))
# pivot raw data wider so can plot
analysis_dataset_4 <- raw_values %>%
pivot_wider(id_cols = c(well, recording_time),
names_from = parameter,
values_from = value,
values_fn = list) %>%
unnest(cols = c(raw))
# pivot data wider so can plot individual columns
analysis_dataset_5 <- calculated_statistics %>%
pivot_wider(id_cols = c(well, recording_time),
names_from = parameter,
values_from = value,
values_fn = list)
# reassign column name and class
analysis_dataset_5[, 3:5] <- sapply(analysis_dataset_5[, 3:5], as.numeric)
#plot barchart
p <- analysis_dataset_5 %>%
ggplot(aes(x = well, y = mean, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin = mean - {{statistic}}, ymax = mean + {{statistic}}), linewidth = 0.4, colour = "orange", alpha = 0.9, size = 1.5, position=position_dodge()) +
geom_point(data = analysis_dataset_4, aes(x = well, y = raw, fill = recording_time), position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.9)) +
labs(fill = "Time Interval", y = y_axis_title)
return(p)
}
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
p <- data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
return(p)
}
test_data_1 <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"),
recording_identifier = "test_data_1")
test_data_2 <- create_electrode_dataset(data_path = system.file("extdata", "comparison_agonist_challenge_electrode_burst_list.csv", package = "MEAanalysis"),
recording_identifier = "test_data_2")
# Following code merges datasets together vertically (list datasets for use in analysis in the rbind function, use examples below to update code)
# Rerun code if with to refresh dataset used to create barchart
# e.g., output_table <- rbind(test_data_1)
# e.g., output_table <- rbind(test_data_1, test_data_2)
output_table <- rbind(test_data_1, test_data_2)
# Following code calculates a chosen parameter for a specific time interval and recordings by single electrodes
# new columns will be added to the dataset each time a function is run (run above rbind function to refresh)
# update time interval (s) and recording identifier accordingly i.e., function(data, time_lower_bound, time_upper_bound, recording_identifier)
# output_table <- number_of_bursts() #calculates number of bursts within a given time interval by electrode (for a specific recording)
# output_table <- burst_duration() #calculates the mean, sd, and se burst duration within a given time interval by electrode (for a specific recording)
# output_table <- spikes_per_burst() #calculates mean, sd, and se number of spikes per burst within a given time interval by electrode (for a specific recording)
# output_table <- mean_burst_ISI() #calculates average, sd, and se mean ISI within a burst (sec) for a given time interval by electrode (for a specific recording)
# EXAMPLE CODE: calculates each parameter for each individual electrode within the given time interval for a recording
output_table <- electrode_burst_duration(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_spikes_per_burst(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_mean_burst_ISI(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- electrode_number_of_bursts(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- electrode_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_2")
p <- single_electrode_barchart(data = output_table, electrode_parameter = "burst_duration", electrode_filter = "A1_", statistic = se)
print(p)
p <- single_electrode_barchart(data = output_table, electrode_parameter = "spikes_per_burst", electrode_filter = "A1_", statistic = se)
print(p)
p <- single_electrode_barchart(data = output_table, electrode_parameter = "mean_burst_ISI", electrode_filter = "A1_", statistic = se)
print(p)
p <- single_electrode_barchart(data = output_table, electrode_parameter = "number_of_bursts", electrode_filter = "A1_")
print(p)
test_data_1 <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"),
recording_identifier = "test_data_1")
test_data_2 <- create_electrode_dataset(data_path = system.file("extdata", "comparison_agonist_challenge_electrode_burst_list.csv", package = "MEAanalysis"),
recording_identifier = "test_data_2")
output_table <- rbind(test_data_1, test_data_2)
output_table <- well_burst_duration(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_burst_duration(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_burst_duration(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- well_spikes_per_burst(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_spikes_per_burst(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_spikes_per_burst(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- well_mean_burst_ISI(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_mean_burst_ISI(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_mean_burst_ISI(data = output_table, 60, 90, recording_identifier = "test_data_2")
output_table <- well_number_of_bursts(data = output_table, 0, 30, recording_identifier = "test_data_1")
output_table <- well_number_of_bursts(data = output_table, 30, 60, recording_identifier = "test_data_1")
output_table <- well_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_1")
output_table <- well_number_of_bursts(data = output_table, 60, 90, recording_identifier = "test_data_2")
p <- well_barchart(data = output_table, well_parameter = "burst_duration", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
p <- well_barchart(data = output_table, well_parameter = "spikes_per_burst", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
p <- well_barchart(data = output_table, well_parameter = "mean_burst_ISI", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
p <- well_barchart(data = output_table, well_parameter = "number_of_bursts", well_filter = "A1|A2|A3|A4", statistic = se)
print(p)
baseline_data <- create_synchrony_dataset(data_path = system.file("extdata", "input_neuralMetric.csv", package = "MEAanalysis"),
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(data_path = system.file("extdata", "comparison_agonist_challenge_neuralMetrics.csv", package = "MEAanalysis"),
heatmap_condition = "Agonist Challenge")
df_list <- list(baseline_data, agonist_challenge_data)
heatmap_data <- df_list %>%
reduce(full_join, by = 'Well')
p <- MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
print(p)
library(roxygen2)
library(devtools)
roxygenise()
devtools::check('MEAanalysis')
devtools::check('MEAanalysis')
