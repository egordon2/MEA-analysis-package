---
title: "MEA_well_barchart"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{MEA_well_barchart}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE, echo = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, include = FALSE}
library(MEAanalysis)
knitr::opts_knit$set(root.dir = '..')
```

# Creating a Bar Chart of Multi-electrode Array Well Average Burst Parameters

The following vignette describes the workflow used to create a bar chart visualisation of multi-electrode array (MEA) parameters calculated for each well. These parameters include number of bursts, number of spikes per burst, burst duration, and mean inter-spike interval within a burst. The purpose of these visualisations is to explore and compare the extracellular field potentials occurring within a well for a specific time interval of an MEA recording. For further information on each function's arguments please see the associated function help pages.

# Workflow

There are 4 steps to create this visualisation:

1. Load electrode burst datasets.
2. Merge electrode burst datasets.
3. Calculate MEA parameters for specific time intervals of a recording.
4. Create barchart of well average burst data for a specific parameter.

# Load electrode burst datasets

First, electrode burst datasets produced by the axis navigator tool need to be loaded into the R environment. This should be done for each MEA recording the user wishes to include in the analysis and can be done using the MEAanalysis:: create_electrode_dataset function. This function reads in electrode burst data in csv format, before filtering and reformatting the data for use in the analysis. As demonstrated in the below example, the user is able to define the name to which the dataset is assigned, the data path, and a unique identifier for the recording the data is associated with.

```{r, warning = FALSE, message = FALSE}
burst_recording_1 <- create_electrode_dataset(
  data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), 
  recording_identifier = "burst_recording_1")

# view first 10 lines of dataset

head(burst_recording_1, 10)
```

```{r, warning = FALSE, message = FALSE}
burst_recording_2 <- create_electrode_dataset(
  data_path = system.file("extdata", "comparison_agonist_challenge_electrode_burst_list.csv", package = "MEAanalysis"), 
  recording_identifier = "burst_recording_2")

# view first 10 lines of dataset

head(burst_recording_2, 10)
```

# Merge electrode burst datasets

The electrode burst datasets for each individual MEA recording should then be merged vertically. This is done using the rbind() function as demonstrated below. The user should update this function to include the dataset names assigned when the electrode burst data was originally loaded into the environment. The specific MEA recording will still be identifiable using the unique identifier defined in the MEAanalysis:: create_electrode_dataset function, which will be included in the 'Recording_identifier' column.

```{r}
output_table <- rbind(burst_recording_1, burst_recording_2)

# view first 10 lines of dataset

head(output_table, 10)
```

# Calculate MEA parameters for specific time intervals of a recording

Additional calculated columns, including the mean, standard deviation (SD), and standard error of the mean (SEM) for a specific MEA parameter, may then be added to the merged electrode burst dataset. These columns are calculated for a specific time interval of a recording. For example, using the MEAanalysis:: well_burst_duration function, the user is able to add three calculated columns to the electrode burst dataset with the mean, SD, and SEM burst duration within each well for a defined time interval of a recording. The package also contains other functions which enable the well average number of bursts detected by an electrode, number of spikes per burst, and mean inter-spike interval within a burst to be calculated. These functions can be ran multiple times with different time intervals and recordings, enabling the user to compare parameters at different time points throughout an MEA experiment. The parameters should be calculated for each time interval the user wishes to include in the barchart visualisation, as demonstrated in the below example.

```{r}
analysis_dataset <- output_table

analysis_dataset <- well_burst_duration(data = analysis_dataset, 0, 30, recording_identifier = "burst_recording_1")
analysis_dataset <- well_burst_duration(data = analysis_dataset, 30, 60, recording_identifier = "burst_recording_1")
analysis_dataset <- well_burst_duration(data = analysis_dataset, 60, 90, recording_identifier = "burst_recording_1")
analysis_dataset <- well_burst_duration(data = analysis_dataset, 60, 90, recording_identifier = "burst_recording_2")
```

```{r, echo = FALSE}
# view first 10 lines of analysis dataset

knitr::kable(analysis_dataset[1:10,]) %>% kableExtra::scroll_box(width = "100%")
```

# Create barchart of well average burst data for a specific parameter

The analysis dataset created above can then be used as an input for the MEAanalysis: well_barchart function. This function will create a barchart of the well average for a specified MEA parameter, grouped by time interval of a recording. This function contains arguments which enable the user to define the parameter to be visualised, as well as the functionality to filter for specific wells, and determine whether error bars represent SD or SEM. 

```{r, warning = FALSE, fig.height = 5, fig.width = 7}
well_barchart(data = analysis_dataset, well_parameter = "burst_duration", well_filter = "A1|A2|A3|A4", statistic = se)
```




