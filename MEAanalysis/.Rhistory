info = "Column classes should match the expected classes")
})
# Define expected column classes
expected_classes <- c("character", "numeric", "numeric", "numeric", "character", "character")
test_that("create_electrode_dataset column classes and names are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Define expected column names
expected_names <- c("Electrode", "Time_s", "Size_spikes", "Duration_s", "Recording_identifier", "well")
# Assert that the column names match the expected names
expect_equal(colnames(dataset), expected_names,
info = "Column names should match the expected names")
# Define expected column classes
expected_classes <- c("character", "numeric", "numeric", "numeric", "character", "character")
# Assert that the column classes match the expected classes
expect_equal(sapply(dataset, class), expected_classes,
info = "Column classes should match the expected classes")
})
test_that("create_electrode_dataset column classes and names are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Define expected column names
expected_names <- c("Electrode", "Time_s", "Size_spikes", "Duration_s", "Recording_identifier", "well")
# Assert that the column names match the expected names
expect_equal(colnames(dataset), expected_names,
info = "Column names should match the expected names")
# Obtain actual column classes
actual_classes <- sapply(dataset, class)
# Define expected column classes
expected_classes <- c("character", "numeric", "numeric", "numeric", "character", "character")
# Assert that the column classes match the expected classes
expect_equal(actual_classes, expected_classes,
info = "Column classes should match the expected classes")
})
test_that("create_electrode_dataset column names are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Define expected column names
expected_names <- c("Electrode", "Time_s", "Size_spikes", "Duration_s", "Recording_identifier", "well")
# Assert that the column names match the expected names
expect_equal(colnames(dataset), expected_names,
info = "Column names should match the expected names")
})
test_that("create_electrode_dataset column classes are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Determine actual column classes
actual_classes <- sapply(dataset, class)
# Define expected column classes
expected_classes <- c("character", "numeric", "numeric", "numeric", "character", "character")
# Assert that the column classes match the expected classes
expect_equal(actual_classes, expected_classes,
info = "Column classes should match the expected classes")
})
test_that("create_electrode_dataset column classes are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Determine actual column classes
actual_classes <- sapply(dataset, class)
# Assert that the column classes match the expected classes
expect_equal(actual_classes, c("character", "numeric", "numeric", "numeric", "character", "character"),
info = "Column classes should match the expected classes")
})
test_that("create_electrode_dataset column classes are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Assert that the column classes match the expected classes
expect_equal(sapply(dataset, class), c("character", "numeric", "numeric", "numeric", "character", "character"),
info = "Column classes should match the expected classes")
})
# Determine actual column classes
actual_classes <- sapply(dataset, class)
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Determine actual column classes
actual_classes <- sapply(dataset, class)
# Define expected column classes
expected_classes <- c("character", "numeric", "numeric", "numeric", "character", "character")
print(actual_classes)
print(expected_classes)
test_that("create_electrode_dataset column classes are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
# Define expected column classes
expected_columns <- data.table(
Electrode = character(),
Time_s = numeric(),
Size_spikes = numeric(),
Duration_s = numeric(),
Recording_identifier= character(),
well = character())
expected_classes <- sapply(expected_columns, class)
# Assert that the column classes match the expected classes
expect_equal(sapply(dataset, class), expected_classes,
info = "Column classes should match the expected classes")
})
test_that("create_electrode_dataset output is a datatable", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = "data/input_electrode_burst.csv", recording_identifier = "burst_recording_1")
expect_equal(is.data.table(dataset), TRUE)
})
baseline_data <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv",
heatmap_condition = "Baseline")
View(baseline_data)
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
expect_equal(is.data.table(dataset), TRUE)
})
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
expect_equal(is.data.table(dataset), TRUE)
})
test_that("create_synchrony dataset column classes are correct",{
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
# Define expected column names and classes
expected_columns <- data.table(
Well = character(),
paste0("synchrony_index: ", "Baseline") = numeric())
test_that("create_synchrony dataset column classes are correct",{
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
# Define expected column names and classes
expected_columns <- data.table(
Well = character(),
paste0("synchrony_index: ", "Baseline") = numeric()
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
expect_equal(is.data.table(dataset), TRUE)
})
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
expect_equal(create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline"), TRUE)
})
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
expect_equal(is.data.table(create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")), TRUE)
})
# read in electrode_burst_list file produced by axis navigator software (update data_path accordingly)
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE)
# convert data frame to data table format for efficiency
setDT(input_data)
# extract well and synchrony index data
data_1 <- input_data[str_detect(X1, "Well Averages|Synchrony Index"), ]
# transpose data table
data_2 <- transpose(data_1) %>%
row_to_names(row_number = 1)
View(data_1)
data_path = "data/input_neuralMetric.csv"
eatmap_condition = "Baseline"
# read in electrode_burst_list file produced by axis navigator software (update data_path accordingly)
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE)
problems(input_data)
View(input_data)
read_csv(file = data_path, skip = 29)
read_csv(file = data_path, skip = 29, col_names = FALSE)
?read_csv
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, col_types = cols())
input_data <- read_csv(file = data_path, skip = 29)
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE)
problems(data)
problems(dat)
problems(input_data)
input_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE, num_threads = 1)
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
expect_equal(is.data.table(dataset), TRUE)
})
vroom::vroom(input_data)
nput_data <- read_csv(file = data_path, skip = 29, col_names = FALSE, show_col_types = FALSE, na = "NA")
test_that("create_synchrony_dataset output is a data table", {
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
expect_equal(is.data.table(dataset), TRUE)
})
test_that("create_synchrony dataset column classes are correct",{
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
# Define expected column names and classes
expected_columns <- data.table(
Well = character(),
paste0("synchrony_index: ", "Baseline") = numeric()
test_that("create_synchrony dataset column classes are correct",{
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
# Define expected column names and classes
expected_columns <- data.table(
Well = character(),
synchrony_index: Baseline = numeric()
test_that("create_synchrony dataset column classes are correct",{
# Load dataset
dataset <- create_synchrony_dataset(data_path = "data/input_neuralMetric.csv", heatmap_condition = "Baseline")
# Define expected column names and classes
expected_columns <- data.table(
Well = character(),
"synchrony_index: Baseline" = numeric()
)
expected_names <- colnames(expected_columns)
expected_classes <- sapply(expected_columns, class)
# Run checks
expect_equal(colnames(dataset), expected_names, info = "Column names should match the expected names")
expect_equal(sapply(dataset, class), expected_classes, info = "Column classes should match the expected classes")
})
devtools::test()
devtools::test()
devtools::document()
roxygen::reoxygenize()
roxygen2::reoxygenize()
roxygen2::roxygenize()
devtools::document()
?read_csv
test_data_1 <- create_electrode_dataset(data_path = "./data/input_electrode_burst.csv",
recording_identifier = "test_data_1")
test_data_2 <- create_electrode_dataset(data_path = "./data/comparison_agonist_challenge_electrode_burst_list.csv",
recording_identifier = "test_data_2")
output_table <- rbind(test_data_1, test_data_2)
baseline_data <- create_synchrony_dataset(data_path = "./data/input_neuralMetric.csv",
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(data_path = "./data/comparison_agonist_challenge_neuralMetrics.csv",
heatmap_condition = "Agonist Challenge")
test_data_1 <- create_electrode_dataset(data_path = "./data/input_electrode_burst.csv",
recording_identifier = "test_data_1")
test_data_2 <- create_electrode_dataset(data_path = "./data/comparison_agonist_challenge_electrode_burst_list.csv",
recording_identifier = "test_data_2")
devtools::document()
devtools::document()
test_that("create_electrode_dataset output is a datatable", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
expect_equal(is.data.table(dataset), TRUE)
})
test_that("create_electrode_dataset column names are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
# Define expected column names
expected_names <- c("Electrode", "Time_s", "Size_spikes", "Duration_s", "Recording_identifier", "well")
# Assert that the column names match the expected names
expect_equal(colnames(dataset), expected_names,
info = "Column names should match the expected names")
})
test_that("create_electrode_dataset column classes are correct", {
# Load the dataset
dataset <- create_electrode_dataset(data_path = system.file("extdata", "input_electrode_burst.csv", package = "MEAanalysis"), recording_identifier = "burst_recording_1")
# Define expected column classes
expected_columns <- data.table(
Electrode = character(),
Time_s = numeric(),
Size_spikes = numeric(),
Duration_s = numeric(),
Recording_identifier= character(),
well = character())
expected_classes <- sapply(expected_columns, class)
# Assert that the column classes match the expected classes
expect_equal(sapply(dataset, class), expected_classes,
info = "Column classes should match the expected classes")
})
devtools::document
devtools::document()
version()
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
update.packages(ask = FALSE, checkBuilt = TRUE)
sessionInfo()
sessionInfo()
library(knitr)
ruby -v
library(MEAanalysis)
?create_electrode_dataset
help(package = MEAanalysis)
?MEAanalysis
??MEAanalysis
library(MEAanalysis)
function_help <- help(package = MEAanalysis)
function_help <- help(package = MEAanalysis)
# Store the help page of a package function in an object
help_page <- help(package = "MEAanalysis", help_type = "html")
help(package = "MEAanalysis")
help(package = "MEAanalysis")
roxygen2::reoxygenise()
roxygen2::roxygenise()
devtools::document()
library(MEAanalysis)
View(analysis_dataset)
devtools::document()
roxygen2::roxygenise()
library(MEAanalysis)
roxygen2::roxygenize()
pkgload::dev_help('MEA_heatmap')
devtools@::document()
devtools::document()
roxygenise()
library(MEAanalysis)
library(roxygen2)
library(devtools)
roxygenise()
roxygenise()
well_barchart <- function(data = output_table, well_parameter,
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6",
statistic = se) {
# Declare variables
analysis_dataset <- NULL
analysis_dataset_2 <- NULL
analysis_dataset_3 <- NULL
analysis_dataset_4 <- NULL
analysis_dataset_5 <- NULL
raw_values <- NULL
calculated_statistics <- NULL
#filter data for plotting
analysis_dataset <- data %>%
select(-c(Time_s, Duration_s, Size_spikes, Recording_identifier)) %>%
distinct() %>%
filter(., str_detect(well, well_filter))
#assign y axis title dependent on chosen well parameter
#(include "number_of_bursts"/ "burst_duration"/ "spikes_per_burst"/ "mean_burst_ISI")
if (well_parameter == "number_of_bursts") {
y_axis_title <- "Average Number of Bursts in Well per Electrode"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_burst_count_raw")|contains("well_burst_count_mean")|contains("well_burst_count_sd")|contains("well_burst_count_se"))
colnames(analysis_dataset_2) = gsub("well_burst_count_", "", colnames(analysis_dataset_2))
} else if (well_parameter == "burst_duration") {
y_axis_title <- "Burst Duration - Well Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_duration_raw")|contains("well_duration_mean")|contains("well_duration_sd")|contains("well_duration_se"))
colnames(analysis_dataset_2) = gsub("well_duration_", "", colnames(analysis_dataset_2))
} else if (well_parameter == "spikes_per_burst") {
y_axis_title <- "Number of Spikes per Burst - Well Average"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_spikes_raw")|contains("well_spikes_mean")|contains("well_spikes_sd")|contains("well_spikes_se"))
colnames(analysis_dataset_2) = gsub("well_spikes_", "", colnames(analysis_dataset_2))
} else if (well_parameter == "mean_burst_ISI") {
y_axis_title <- "Mean ISI within Burst - Well Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "well"|contains("well_raw_mean_burst_ISI")|contains("well_avg_mean_burst_ISI")|contains("well_sd_mean_burst_ISI")|contains("well_se_mean_burst_ISI"))
colnames(analysis_dataset_2) = gsub("_mean_burst_ISI", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("well_", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("avg", "mean", colnames(analysis_dataset_2))
}  else {
}
#reformat data for plotting
analysis_dataset_3 <- melt(analysis_dataset_2, id = "well")
analysis_dataset_3$recording_time = gsub(pattern = ".*:", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3$parameter = gsub(pattern = "\\:.*", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3 <- analysis_dataset_3 %>%
select(-c(variable))
# create data frame of raw values
raw_values <- analysis_dataset_3 %>%
filter(., parameter == "raw")
# create data frame of distinct calculated statistics
calculated_statistics <- analysis_dataset_3 %>%
filter(., parameter != "raw") %>%
distinct() %>%
group_by(well, recording_time, parameter) %>%
slice(which.max(!is.na(value)))
# pivot raw data wider so can plot
analysis_dataset_4 <- raw_values %>%
pivot_wider(id_cols = c(well, recording_time),
names_from = parameter,
values_from = value,
values_fn = list) %>%
unnest(cols = c(raw))
# pivot data wider so can plot individual columns
analysis_dataset_5 <- calculated_statistics %>%
pivot_wider(id_cols = c(well, recording_time),
names_from = parameter,
values_from = value,
values_fn = list)
# reassign column name and class
analysis_dataset_5[, 3:5] <- sapply(analysis_dataset_5[, 3:5], as.numeric)
#plot barchart
p <- analysis_dataset_5 %>%
ggplot(aes(x = well, y = mean, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin = mean - {{statistic}}, ymax = mean + {{statistic}}), linewidth = 0.4, colour = "orange", alpha = 0.9, size = 1.5, position=position_dodge()) +
geom_point(data = analysis_dataset_4, aes(x = well, y = raw, fill = recording_time), position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.9)) +
labs(fill = "Time Interval", y = y_axis_title)
return(p)
}
single_electrode_barchart <- function(data = output_table,
electrode_parameter,
electrode_filter =
"A1_|A2_|A3_|A4_|A5_|A6_|B1_|B2_|B3_|B4_|B5_|B6_|C1_
|C2_|C3_|C4_|C5_|C6_|D1_|D2_|D3_|D4_|D5_|D6_",
statistic = se) {
# Declare variables
analysis_dataset <- NULL
analysis_dataset_2 <- NULL
analysis_dataset_3 <- NULL
analysis_dataset_4 <- NULL
analysis_dataset_5 <- NULL
raw_values <- NULL
calculated_statistics <- NULL
#filter data for plotting
analysis_dataset <- data %>%
select(-c(Time_s, Duration_s, Size_spikes, Recording_identifier)) %>%
distinct() %>%
filter(., str_detect(Electrode, electrode_filter))
#assign y axis title dependent on chosen electrode parameter
#(include "number_of_bursts"/ "burst_duration"/ "spikes_per_burst"/ "mean_burst_ISI")
if (electrode_parameter == "number_of_bursts") {
y_axis_title <- "Number of Bursts"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_number_of_bursts"))
} else if (electrode_parameter == "burst_duration") {
y_axis_title <- "Burst Duration - Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_duration_raw")|contains("electrode_duration_mean")|contains("electrode_duration_sd")|contains("electrode_duration_se"))
colnames(analysis_dataset_2) = gsub("electrode_duration_", "", colnames(analysis_dataset_2))
} else if (electrode_parameter == "spikes_per_burst") {
y_axis_title <- "Number of Spikes per Burst - Average"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_spikes_raw")|contains("electrode_spikes_mean")|contains("electrode_spikes_sd")|contains("electrode_spikes_se"))
colnames(analysis_dataset_2) = gsub("electrode_spikes_", "", colnames(analysis_dataset_2))
} else if (electrode_parameter == "mean_burst_ISI") {
y_axis_title <- "Mean ISI within Burst - Average (sec)"
analysis_dataset_2 <- select(analysis_dataset, "Electrode"|contains("electrode_raw_mean_burst_ISI")|contains("electrode_avg_mean_burst_ISI")|contains("electrode_sd_mean_burst_ISI")|contains("electrode_se_mean_burst_ISI"))
colnames(analysis_dataset_2) = gsub("_mean_burst_ISI", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("electrode_", "", colnames(analysis_dataset_2))
colnames(analysis_dataset_2) = gsub("avg", "mean", colnames(analysis_dataset_2))
}  else {
}
#reformat data for plotting
analysis_dataset_3 <- melt(analysis_dataset_2, id = "Electrode")
analysis_dataset_3$recording_time = gsub(pattern = ".*:", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3$parameter = gsub(pattern = "\\:.*", replacement = "", x = analysis_dataset_3$variable)
analysis_dataset_3 <- analysis_dataset_3 %>%
select(-c(variable))
# remove duplicate rows if not raw value
# create analysis dataset for use in bar plot dependent on chosen parameter
if (electrode_parameter == "number_of_bursts") {
#remove duplicate rows where value is NA (grouped by electrode, recording_time, and parameter)
analysis_dataset_4 <- analysis_dataset_3 %>%
group_by(Electrode, recording_time, parameter) %>%
filter(value == max(value)) %>%
distinct() %>%
ungroup()
#pivot data wider so can plot individual columns
analysis_dataset_5 <- analysis_dataset_4 %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value)
}  else {
# create data frame of raw values
raw_values <- analysis_dataset_3 %>%
filter(., parameter == "raw")
# create data frame of distinct calculated statistics
calculated_statistics <- analysis_dataset_3 %>%
filter(., parameter != "raw") %>%
distinct() %>%
group_by(Electrode, recording_time, parameter) %>%
slice(which.max(!is.na(value)))
# pivot raw data wider so can plot
analysis_dataset_4 <- raw_values %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value,
values_fn = list) %>%
unnest(cols = c(raw))
# pivot data wider so can plot individual columns
analysis_dataset_5 <- calculated_statistics %>%
pivot_wider(id_cols = c(Electrode, recording_time),
names_from = parameter,
values_from = value,
values_fn = list)
# reassign column name and class
analysis_dataset_5[, 3:5] <- sapply(analysis_dataset_5[, 3:5], as.numeric)
}
# plot barchart
if (electrode_parameter == "number_of_bursts") {
p <- analysis_dataset_5 %>%
ggplot(aes(x = Electrode, y = electrode_number_of_bursts, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
labs(fill = "Time Interval", y = y_axis_title)
} else {
p <- analysis_dataset_5 %>%
ggplot(aes(x = Electrode, y = mean, fill = recording_time)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin = mean - {{statistic}}, ymax = mean + {{statistic}}), linewidth = 0.4, colour = "orange", alpha = 0.9, size = 1.5, position=position_dodge()) +
geom_point(data = analysis_dataset_4, aes(x = Electrode, y = raw, fill = recording_time), position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.9)) +
labs(fill = "Time Interval", y = y_axis_title)
}
return(p)
}
MEA_heatmap <- function(data,
x_axis_title = "Experimental Condition",
well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6") {
# Declare variables
data_1 <- NULL
data_2 <- NULL
# remove synchrony index from column names so not included in axis labels
colnames(data) = gsub("synchrony_index: ", "", colnames(data))
# filter data for specific wells
data_1 <- data[str_detect(Well, well_filter), ]
# reformat datatable for use in heatmap
data_2 <- melt(data_1, id = "Well") %>%
rename(experimental_condition = variable,
synchrony_index = value)
data_2[, 1] <- sapply(data_2[, 1], as.factor)
# create ggplot heatmap
p <- data_2 %>%
ggplot(aes(x = experimental_condition, y = Well, fill = synchrony_index)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Synchrony Index", x = x_axis_title, y = "Well") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
return(p)
}
p <- p +
devtools::document()
devtools::document()
devtools::document()
library(MEAanalysis)
