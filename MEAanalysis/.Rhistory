install.packages("Rtools")
library(Rtools)
library("Rtools")
install.packages("Rtools")
install.packages("Rtools")
library("Rtools")
library("Rtools43")
Version()
version()
Version()
R.version)
R.version()
R.Version()
install.packages("Rtools")
library(Rtools)
library(Rtools43)
library("Rtools43")
install.packages("Rtools")
install.packages("Rtools43")
install.packages("Rtools")
library(Rtools43)
library("Rtools43")
library(C:/rtools43)
version
gcc --version
version
install.packages("Rtools")
library(Rtools)
library(Rtools43)
library(MEAanalysis)
library(MEAanalysis)
library(MEAanalysis)
# define packages to install
packages <- c('dplyr', 'tidyverse', 'readxl', 'stringr', 'ggplot2', 'reshape2', 'janitor', 'data.table')
# install all packages that are not already installed
install.packages(setdiff(packages, rownames(installed.packages())))
# load packages
invisible(lapply(packages, library, character.only = TRUE))
# set function path dependent on working directory
wd <- getwd()
function_path <- paste0(wd, "/synchrony_functions/")
# call in functions (update function_path accordingly)
source(file = paste(function_path, "create_synchrony_dataset.R", sep = ""))
setwd("C:/Users/Emily Gordon/OneDrive - Nexus365/DPhil OXION/DB Rotation/Github Repository/synchrony_heat_map")
# set function path dependent on working directory
wd <- getwd()
function_path <- paste0(wd, "/synchrony_functions/")
# call in functions (update function_path accordingly)
source(file = paste(function_path, "create_synchrony_dataset.R", sep = ""))
source(file = paste(function_path, "MEA_heatmap.R", sep = ""))
baseline_data <- create_synchrony_dataset(data_path = "C:/Users/Emily Gordon/OneDrive - Nexus365/DPhil OXION/DB Rotation/Github Repository/synchrony_heat_map/synchrony_data/baseline_neuralMetrics.csv",
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(data_path = "C:/Users/Emily Gordon/OneDrive - Nexus365/DPhil OXION/DB Rotation/Github Repository/synchrony_heat_map/synchrony_data/comparison_neuralMetrics_agonist_challenge.csv",
heatmap_condition = "Agonist Challenge")
df_list <- list(baseline_data, agonist_challenge_data)
heatmap_data <- df_list %>%
reduce(full_join, by = 'Well')
# plot heatmap grouped by the heatmap_condition specified above
# option to filter for specific wells using 'well_filter' argument
# function contains following arguments heatmap(data, well_filter)
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
# set function path dependent on working directory
wd <- getwd()
function_path <- paste0(wd, "/synchrony_functions/")
# call in functions (update function_path accordingly)
source(file = paste(function_path, "create_synchrony_dataset.R", sep = ""))
source(file = paste(function_path, "MEA_heatmap.R", sep = ""))
baseline_data <- create_synchrony_dataset(data_path = "C:/Users/Emily Gordon/OneDrive - Nexus365/DPhil OXION/DB Rotation/Github Repository/synchrony_heat_map/synchrony_data/baseline_neuralMetrics.csv",
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(data_path = "C:/Users/Emily Gordon/OneDrive - Nexus365/DPhil OXION/DB Rotation/Github Repository/synchrony_heat_map/synchrony_data/comparison_neuralMetrics_agonist_challenge.csv",
heatmap_condition = "Agonist Challenge")
df_list <- list(baseline_data, agonist_challenge_data)
heatmap_data <- df_list %>%
reduce(full_join, by = 'Well')
# plot heatmap grouped by the heatmap_condition specified above
# option to filter for specific wells using 'well_filter' argument
# function contains following arguments heatmap(data, well_filter)
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
# set function path dependent on working directory
wd <- getwd()
function_path <- paste0(wd, "/synchrony_functions/")
# call in functions (update function_path accordingly)
source(file = paste(function_path, "create_synchrony_dataset.R", sep = ""))
source(file = paste(function_path, "MEA_heatmap.R", sep = ""))
baseline_data <- create_synchrony_dataset(data_path = "C:/Users/Emily Gordon/OneDrive - Nexus365/DPhil OXION/DB Rotation/Github Repository/synchrony_heat_map/synchrony_data/baseline_neuralMetrics.csv",
heatmap_condition = "Baseline")
agonist_challenge_data <- create_synchrony_dataset(data_path = "C:/Users/Emily Gordon/OneDrive - Nexus365/DPhil OXION/DB Rotation/Github Repository/synchrony_heat_map/synchrony_data/comparison_neuralMetrics_agonist_challenge.csv",
heatmap_condition = "Agonist Challenge")
df_list <- list(baseline_data, agonist_challenge_data)
heatmap_data <- df_list %>%
reduce(full_join, by = 'Well')
# plot heatmap grouped by the heatmap_condition specified above
# option to filter for specific wells using 'well_filter' argument
# function contains following arguments heatmap(data, well_filter)
MEA_heatmap(data = heatmap_data, well_filter = "A1|A2|A3|A4|A5|A6|B1|B2|B3|B4|B5|B6|C1|C2|C3|C4|C5|C6|D1|D2|D3|D4|D5|D6")
